version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: insurance-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: insurance
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - insurance-network

  mongodb:
    image: mongo:6.0
    container_name: insurance-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_DATABASE: insurance
    volumes:
      - mongodb-data:/data/db
      - ./init-scripts/mongodb:/docker-entrypoint-initdb.d
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - insurance-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: insurance-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - insurance-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: insurance-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - insurance-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: insurance-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: insurance-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - insurance-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: insurance-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - insurance-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: insurance-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - insurance-network

  # Mocks for external services
  wiremock:
    image: wiremock/wiremock:2.35.0
    container_name: insurance-wiremock
    ports:
      - "8090:8080"
    volumes:
      - ./wiremock:/home/wiremock
    command: --verbose
    networks:
      - insurance-network

  # Microservices (for local development with hot-reload)
  claims-service:
    image: eclipse-temurin:17-jdk-alpine
    container_name: insurance-claims-service
    working_dir: /app
    volumes:
      - ../../services/claims-service:/app
      - ~/.m2:/root/.m2
    ports:
      - "8081:8081"
      - "5005:5005"
    command: >
      sh -c "cd /app && 
             ./mvnw spring-boot:run -Dspring-boot.run.profiles=local -Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/claims
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      LOGGING_LEVEL_COM_INSURANCE: DEBUG
      POLICY_SERVICE_URL: http://wiremock:8080/policies
    depends_on:
      - postgres
      - kafka
      - wiremock
    networks:
      - insurance-network

  payment-service:
    image: eclipse-temurin:17-jdk-alpine
    container_name: insurance-payment-service
    working_dir: /app
    volumes:
      - ../../services/payment-service:/app
      - ~/.m2:/root/.m2
    ports:
      - "8082:8082"
      - "5006:5006"
    command: >
      sh -c "cd /app && 
             ./mvnw spring-boot:run -Dspring-boot.run.profiles=local -Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006'"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/payments
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      LOGGING_LEVEL_COM_INSURANCE: DEBUG
    depends_on:
      - postgres
      - kafka
    networks:
      - insurance-network

  notification-service:
    image: eclipse-temurin:17-jdk-alpine
    container_name: insurance-notification-service
    working_dir: /app
    volumes:
      - ../../services/notification-service:/app
      - ~/.m2:/root/.m2
    ports:
      - "8083:8083"
      - "5007:5007"
    command: >
      sh -c "cd /app && 
             ./mvnw spring-boot:run -Dspring-boot.run.profiles=local -Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007'"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:mongo@mongodb:27017/notifications?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      LOGGING_LEVEL_COM_INSURANCE: DEBUG
      SPRING_MAIL_HOST: mailhog
      SPRING_MAIL_PORT: 1025
    depends_on:
      - mongodb
      - kafka
      - mailhog
    networks:
      - insurance-network
  
  policy-service:
    image: eclipse-temurin:17-jdk-alpine
    container_name: insurance-policy-service
    working_dir: /app
    volumes:
      - ../../services/policy-service:/app
      - ~/.m2:/root/.m2
    ports:
      - "8084:8084"
      - "5008:5008"
    command: >
      sh -c "cd /app && 
             ./mvnw spring-boot:run -Dspring-boot.run.profiles=local -Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008'"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/policies
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      LOGGING_LEVEL_COM_INSURANCE: DEBUG
    depends_on:
      - postgres
      - kafka
    networks:
      - insurance-network

  # Frontend development
  frontend:
    image: node:18-alpine
    container_name: insurance-frontend
    working_dir: /app
    volumes:
      - ../../frontend:/app
    ports:
      - "3000:3000"
    command: sh -c "npm install && npm start"
    environment:
      REACT_APP_API_URL: http://localhost:8080/api
    networks:
      - insurance-network

  # For email testing
  mailhog:
    image: mailhog/mailhog
    container_name: insurance-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # UI
    networks:
      - insurance-network

volumes:
  postgres-data:
  mongodb-data:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  elasticsearch-data:

networks:
  insurance-network:
    driver: bridge 