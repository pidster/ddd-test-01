apiVersion: apps/v1
kind: Deployment
metadata:
  name: claims-service
  namespace: insurance-system
  labels:
    app: claims-service
    domain: claims
spec:
  replicas: 2
  selector:
    matchLabels:
      app: claims-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: claims-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8081"
    spec:
      containers:
      - name: claims-service
        image: insurance-company/claims-service:${VERSION}
        imagePullPolicy: Always
        ports:
        - containerPort: 8081
        resources:
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: SERVER_PORT
          value: "8081"
        - name: LOGGING_LEVEL_ROOT
          value: "INFO"
        - name: LOGGING_LEVEL_COM_INSURANCE
          value: "DEBUG"
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: claims-db-credentials
              key: url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: claims-db-credentials
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: claims-db-credentials
              key: password
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: bootstrap-servers
        - name: SPRING_KAFKA_SECURITY_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: security-protocol
        - name: POLICY_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: service-endpoints
              key: policy-service-url
        - name: SPRING_APPLICATION_NAME
          value: "claims-service"
        volumeMounts:
        - name: claims-config-volume
          mountPath: /config
      volumes:
      - name: claims-config-volume
        configMap:
          name: claims-config
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      serviceAccountName: claims-service-account
---
apiVersion: v1
kind: Service
metadata:
  name: claims-service
  namespace: insurance-system
  labels:
    app: claims-service
    domain: claims
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8081
    protocol: TCP
    name: http
  selector:
    app: claims-service
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: claims-service-pdb
  namespace: insurance-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: claims-service
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: claims-service-hpa
  namespace: insurance-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: claims-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80 