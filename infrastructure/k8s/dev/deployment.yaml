apiVersion: apps/v1
kind: Deployment
metadata:
  name: insurance-service
  namespace: insurance-dev
  labels:
    app: insurance-service
    environment: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: insurance-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: insurance-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: insurance-service
        image: docker-registry.insurance.com/insurance-service:dev
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "dev"
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: insurance-db-credentials
              key: url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: insurance-db-credentials
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: insurance-db-credentials
              key: password
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          value: "kafka.insurance-dev:9092"
        resources:
          requests:
            memory: "512Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 2
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 2
          failureThreshold: 5
      imagePullSecrets:
      - name: docker-registry-credentials
---
apiVersion: v1
kind: Service
metadata:
  name: insurance-service
  namespace: insurance-dev
  labels:
    app: insurance-service
    environment: dev
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: insurance-service
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: insurance-service
  namespace: insurance-dev
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - dev-api.insurance.com
    secretName: insurance-service-tls
  rules:
  - host: dev-api.insurance.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: insurance-service
            port:
              number: 8080
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: insurance-service
  namespace: insurance-dev
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: insurance-service
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80 