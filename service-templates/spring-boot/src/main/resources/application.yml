spring:
  application:
    name: insurance-service
  
  # Database configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/insurance_db
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  
  # JPA/Hibernate configuration
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
  
  # Flyway database migration configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
  
  # Kafka configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: ${spring.application.name}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.insurance.service.domain.event

# Server configuration
server:
  port: 8080
  servlet:
    context-path: /api

# Actuator configuration for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}

# Logging configuration
logging:
  level:
    root: INFO
    com.insurance: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# OpenAPI documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method

# Application-specific configuration
insurance:
  claim:
    max-amount: 100000
    auto-approve-threshold: 500
  notification:
    email:
      enabled: true
    sms:
      enabled: false

# OAuth2 Resource Server Configuration
security:
  oauth2:
    resourceserver:
      jwt:
        issuer-uri: https://auth.insurance.com/
        jwk-set-uri: https://auth.insurance.com/.well-known/jwks.json

# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  jpa:
    hibernate:
      ddl-auto: update
  devtools:
    restart:
      enabled: true
    livereload:
      enabled: true

# Test Profile
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password: password
    driver-class-name: org.h2.Driver
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
  kafka:
    bootstrap-servers: ${embedded.kafka.brokerList}

# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    hibernate:
      ddl-auto: validate
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false

logging:
  level:
    root: INFO
    com.insurance: INFO
    org.springframework: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: INFO 