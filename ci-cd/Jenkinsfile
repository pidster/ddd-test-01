pipeline {
    agent {
        docker {
            image 'maven:3.9.5-eclipse-temurin-17-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }
    
    environment {
        DOCKER_REGISTRY = 'docker-registry.insurance.com'
        SERVICE_NAME = 'insurance-service'
        VERSION = "${env.BUILD_NUMBER}"
        SONAR_HOST = 'http://sonarqube:9000'
        DEPLOY_ENV = "${params.ENV ?: 'dev'}"
        SLACK_CHANNEL = '#ci-notifications'
    }
    
    parameters {
        choice(name: 'ENV', choices: ['dev', 'test', 'staging', 'prod'], description: 'Deployment Environment')
        booleanParam(name: 'RUN_INTEGRATION_TESTS', defaultValue: true, description: 'Run integration tests')
        booleanParam(name: 'DEPLOY', defaultValue: true, description: 'Deploy after build')
    }
    
    stages {
        stage('Initialize') {
            steps {
                echo "Building ${SERVICE_NAME} version ${VERSION} for ${DEPLOY_ENV} environment"
                sh 'java -version'
                sh 'mvn -version'
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn clean compile'
            }
        }
        
        stage('Unit Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    jacoco(
                        execPattern: '**/target/jacoco.exec',
                        classPattern: '**/target/classes',
                        sourcePattern: '**/src/main/java'
                    )
                }
            }
        }
        
        stage('Integration Test') {
            when {
                expression { return params.RUN_INTEGRATION_TESTS }
            }
            steps {
                sh 'mvn verify -P integration-tests -DskipUnitTests'
            }
            post {
                always {
                    junit '**/target/failsafe-reports/*.xml'
                }
            }
        }
        
        stage('Static Code Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Package') {
            steps {
                sh 'mvn package -DskipTests'
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def dockerImage = docker.build("${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION}")
                    dockerImage.tag("${DEPLOY_ENV}")
                    
                    withCredentials([string(credentialsId: 'docker-registry-credentials', variable: 'DOCKER_CREDENTIALS')]) {
                        sh "docker login ${DOCKER_REGISTRY} -u \${DOCKER_CREDENTIALS_USR} -p \${DOCKER_CREDENTIALS_PSW}"
                        dockerImage.push("${VERSION}")
                        dockerImage.push("${DEPLOY_ENV}")
                    }
                }
            }
        }
        
        stage('Deploy') {
            when {
                expression { return params.DEPLOY }
            }
            steps {
                script {
                    echo "Deploying to ${DEPLOY_ENV} environment"
                    
                    // Dev deployment
                    if (DEPLOY_ENV == 'dev') {
                        sh "kubectl config use-context dev-cluster"
                        sh "kubectl apply -f k8s/${DEPLOY_ENV}/deployment.yaml"
                        sh "kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION} --record"
                    } 
                    // Test deployment
                    else if (DEPLOY_ENV == 'test') {
                        sh "kubectl config use-context test-cluster"
                        sh "kubectl apply -f k8s/${DEPLOY_ENV}/deployment.yaml"
                        sh "kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION} --record"
                    }
                    // Staging deployment
                    else if (DEPLOY_ENV == 'staging') {
                        sh "kubectl config use-context staging-cluster"
                        sh "kubectl apply -f k8s/${DEPLOY_ENV}/deployment.yaml"
                        sh "kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION} --record"
                    }
                    // Production deployment - requires manual approval
                    else if (DEPLOY_ENV == 'prod') {
                        timeout(time: 60, unit: 'MINUTES') {
                            input message: "Deploy to production?", ok: "Yes"
                        }
                        sh "kubectl config use-context prod-cluster"
                        sh "kubectl apply -f k8s/${DEPLOY_ENV}/deployment.yaml"
                        sh "kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION} --record"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Build successful!"
            slackSend(
                channel: "${SLACK_CHANNEL}",
                color: 'good',
                message: "✅ Build #${env.BUILD_NUMBER} of ${SERVICE_NAME} for ${DEPLOY_ENV} environment succeeded!"
            )
        }
        failure {
            echo "Build failed!"
            slackSend(
                channel: "${SLACK_CHANNEL}",
                color: 'danger',
                message: "❌ Build #${env.BUILD_NUMBER} of ${SERVICE_NAME} for ${DEPLOY_ENV} environment failed!"
            )
        }
        always {
            echo "Clean workspace"
            cleanWs()
        }
    }
} 